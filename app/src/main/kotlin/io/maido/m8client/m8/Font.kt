package io.maido.m8client.m8

import android.graphics.Bitmap
import java.nio.ByteBuffer
import kotlin.Int.Companion.MAX_VALUE
import kotlin.experimental.and

class Font {
    companion object {
        private const val WIDTH = 128
        private const val HEIGHT = 64
        private const val CHARS_BY_ROW = 16
        private const val CHARS_BY_COL = 8
        const val CHAR_WIDTH = WIDTH / CHARS_BY_ROW
        const val CHAR_HEIGHT = HEIGHT / CHARS_BY_COL

        // @formatter:off
        private val FONT_DATA = byteArrayOf(
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xfe.b, 0xf5.b, 0xff.b, 0xfb.b, 0xff.b, 0xf9.b, 0xfb.b,
            0xef.b, 0xfe.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xef.b, 0xff.b, 0xfe.b, 0xf5.b, 0xf5.b,
            0xe0.b, 0xec.b, 0xf6.b, 0xfb.b, 0xf7.b, 0xfd.b, 0xf5.b, 0xfb.b, 0xff.b, 0xff.b, 0xff.b, 0xef.b,
            0xff.b, 0xfe.b, 0xff.b, 0xe0.b, 0xfa.b, 0xf4.b, 0xfa.b, 0xff.b, 0xf7.b, 0xfd.b, 0xfb.b, 0xfb.b,
            0xff.b, 0xff.b, 0xff.b, 0xf7.b, 0xff.b, 0xfe.b, 0xff.b, 0xf5.b, 0xe0.b, 0xfb.b, 0xed.b, 0xff.b,
            0xf7.b, 0xfd.b, 0xf5.b, 0xe0.b, 0xff.b, 0xe0.b, 0xff.b, 0xfb.b, 0xff.b, 0xfe.b, 0xff.b, 0xe0.b,
            0xeb.b, 0xe5.b, 0xea.b, 0xff.b, 0xf7.b, 0xfd.b, 0xff.b, 0xfb.b, 0xff.b, 0xff.b, 0xff.b, 0xfd.b,
            0xff.b, 0xff.b, 0xff.b, 0xf5.b, 0xe0.b, 0xe6.b, 0xf6.b, 0xff.b, 0xf7.b, 0xfd.b, 0xff.b, 0xfb.b,
            0xfb.b, 0xff.b, 0xff.b, 0xfe.b, 0xff.b, 0xfe.b, 0xff.b, 0xff.b, 0xfb.b, 0xff.b, 0xe9.b, 0xff.b,
            0xef.b, 0xfe.b, 0xff.b, 0xff.b, 0xfb.b, 0xff.b, 0xfb.b, 0xfe.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xe0.b, 0xfb.b, 0xe0.b, 0xe0.b, 0xee.b, 0xe0.b, 0xe0.b, 0xe0.b, 0xe1.b, 0xe0.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xf1.b, 0xee.b, 0xf8.b, 0xef.b, 0xef.b, 0xee.b, 0xfe.b, 0xfe.b, 0xef.b,
            0xee.b, 0xee.b, 0xff.b, 0xff.b, 0xf7.b, 0xff.b, 0xfd.b, 0xee.b, 0xe6.b, 0xfb.b, 0xef.b, 0xef.b,
            0xee.b, 0xfe.b, 0xfe.b, 0xef.b, 0xee.b, 0xee.b, 0xfd.b, 0xfd.b, 0xf3.b, 0xe0.b, 0xf9.b, 0xef.b,
            0xea.b, 0xfb.b, 0xe0.b, 0xe0.b, 0xe0.b, 0xe0.b, 0xe0.b, 0xf7.b, 0xe0.b, 0xe0.b, 0xff.b, 0xff.b,
            0xf1.b, 0xff.b, 0xf1.b, 0xf7.b, 0xec.b, 0xfb.b, 0xfe.b, 0xef.b, 0xef.b, 0xef.b, 0xee.b, 0xfb.b,
            0xee.b, 0xef.b, 0xff.b, 0xff.b, 0xf3.b, 0xe0.b, 0xf9.b, 0xfb.b, 0xee.b, 0xfb.b, 0xfe.b, 0xef.b,
            0xef.b, 0xef.b, 0xee.b, 0xfb.b, 0xee.b, 0xef.b, 0xfd.b, 0xfd.b, 0xf7.b, 0xff.b, 0xfd.b, 0xff.b,
            0xe0.b, 0xe0.b, 0xe0.b, 0xe0.b, 0xef.b, 0xe0.b, 0xe0.b, 0xfb.b, 0xf0.b, 0xef.b, 0xff.b, 0xfd.b,
            0xff.b, 0xff.b, 0xff.b, 0xfb.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xf1.b, 0xf1.b, 0xf0.b, 0xf1.b,
            0xf0.b, 0xe0.b, 0xe0.b, 0xf1.b, 0xee.b, 0xe0.b, 0xef.b, 0xee.b, 0xfe.b, 0xee.b, 0xee.b, 0xf1.b,
            0xee.b, 0xee.b, 0xee.b, 0xee.b, 0xee.b, 0xfe.b, 0xfe.b, 0xee.b, 0xee.b, 0xfb.b, 0xef.b, 0xf6.b,
            0xfe.b, 0xe4.b, 0xec.b, 0xee.b, 0xe2.b, 0xee.b, 0xee.b, 0xfe.b, 0xee.b, 0xfe.b, 0xfe.b, 0xfe.b,
            0xee.b, 0xfb.b, 0xef.b, 0xfa.b, 0xfe.b, 0xea.b, 0xea.b, 0xee.b, 0xea.b, 0xe0.b, 0xf0.b, 0xfe.b,
            0xee.b, 0xf0.b, 0xf0.b, 0xfe.b, 0xe0.b, 0xfb.b, 0xef.b, 0xfc.b, 0xfe.b, 0xee.b, 0xe6.b, 0xee.b,
            0xe2.b, 0xee.b, 0xee.b, 0xfe.b, 0xee.b, 0xfe.b, 0xfe.b, 0xe6.b, 0xee.b, 0xfb.b, 0xee.b, 0xfa.b,
            0xfe.b, 0xee.b, 0xee.b, 0xee.b, 0xfe.b, 0xee.b, 0xee.b, 0xee.b, 0xee.b, 0xfe.b, 0xfe.b, 0xee.b,
            0xee.b, 0xfb.b, 0xee.b, 0xf6.b, 0xfe.b, 0xee.b, 0xee.b, 0xee.b, 0xf1.b, 0xee.b, 0xf0.b, 0xf1.b,
            0xf0.b, 0xe0.b, 0xfe.b, 0xf1.b, 0xee.b, 0xe0.b, 0xf1.b, 0xee.b, 0xe0.b, 0xee.b, 0xee.b, 0xf1.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xf0.b, 0xf1.b, 0xf0.b, 0xe1.b, 0xe0.b, 0xee.b, 0xee.b, 0xee.b,
            0xee.b, 0xee.b, 0xe0.b, 0xe7.b, 0xfe.b, 0xfc.b, 0xfb.b, 0xff.b, 0xee.b, 0xee.b, 0xee.b, 0xfe.b,
            0xfb.b, 0xee.b, 0xee.b, 0xee.b, 0xee.b, 0xee.b, 0xef.b, 0xf7.b, 0xfe.b, 0xfd.b, 0xf5.b, 0xff.b,
            0xee.b, 0xee.b, 0xee.b, 0xfe.b, 0xfb.b, 0xee.b, 0xee.b, 0xee.b, 0xf5.b, 0xee.b, 0xf7.b, 0xf7.b,
            0xfd.b, 0xfd.b, 0xff.b, 0xff.b, 0xf0.b, 0xee.b, 0xf0.b, 0xf1.b, 0xfb.b, 0xee.b, 0xee.b, 0xee.b,
            0xfb.b, 0xe1.b, 0xfb.b, 0xf7.b, 0xfb.b, 0xfd.b, 0xff.b, 0xff.b, 0xfe.b, 0xea.b, 0xf6.b, 0xef.b,
            0xfb.b, 0xee.b, 0xf5.b, 0xea.b, 0xf5.b, 0xef.b, 0xfd.b, 0xf7.b, 0xf7.b, 0xfd.b, 0xff.b, 0xff.b,
            0xfe.b, 0xf6.b, 0xee.b, 0xef.b, 0xfb.b, 0xee.b, 0xf5.b, 0xe4.b, 0xee.b, 0xef.b, 0xfe.b, 0xf7.b,
            0xef.b, 0xfd.b, 0xff.b, 0xff.b, 0xfe.b, 0xe9.b, 0xee.b, 0xf0.b, 0xfb.b, 0xf1.b, 0xfb.b, 0xee.b,
            0xee.b, 0xf0.b, 0xe0.b, 0xe7.b, 0xef.b, 0xfc.b, 0xff.b, 0xe0.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xfd.b, 0xff.b, 0xfe.b, 0xff.b, 0xef.b, 0xff.b, 0xe3.b, 0xff.b, 0xfe.b, 0xfb.b, 0xf7.b, 0xfe.b,
            0xf9.b, 0xff.b, 0xff.b, 0xff.b, 0xfb.b, 0xff.b, 0xfe.b, 0xff.b, 0xef.b, 0xff.b, 0xfb.b, 0xff.b,
            0xfe.b, 0xff.b, 0xff.b, 0xfe.b, 0xfb.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xe0.b, 0xe0.b, 0xe0.b,
            0xe0.b, 0xe0.b, 0xe0.b, 0xe0.b, 0xe0.b, 0xf9.b, 0xf7.b, 0xee.b, 0xfb.b, 0xe0.b, 0xe0.b, 0xe0.b,
            0xff.b, 0xef.b, 0xee.b, 0xfe.b, 0xee.b, 0xee.b, 0xfb.b, 0xee.b, 0xee.b, 0xfb.b, 0xf7.b, 0xf6.b,
            0xfb.b, 0xea.b, 0xee.b, 0xee.b, 0xff.b, 0xe0.b, 0xee.b, 0xfe.b, 0xee.b, 0xe0.b, 0xfb.b, 0xe0.b,
            0xee.b, 0xfb.b, 0xf7.b, 0xfa.b, 0xfb.b, 0xea.b, 0xee.b, 0xee.b, 0xff.b, 0xee.b, 0xee.b, 0xfe.b,
            0xee.b, 0xfe.b, 0xfb.b, 0xef.b, 0xee.b, 0xfb.b, 0xf7.b, 0xf4.b, 0xfb.b, 0xea.b, 0xee.b, 0xee.b,
            0xff.b, 0xe0.b, 0xe0.b, 0xe0.b, 0xe0.b, 0xe0.b, 0xfb.b, 0xe0.b, 0xee.b, 0xf1.b, 0xf8.b, 0xee.b,
            0xf1.b, 0xea.b, 0xee.b, 0xe0.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xfb.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xe0.b, 0xfb.b, 0xe0.b, 0xff.b, 0xc0.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xfb.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xee.b,
            0xfb.b, 0xee.b, 0xed.b, 0xd6.b, 0xe0.b, 0xe0.b, 0xe0.b, 0xe0.b, 0xe0.b, 0xee.b, 0xee.b, 0xea.b,
            0xee.b, 0xee.b, 0xe0.b, 0xee.b, 0xfb.b, 0xee.b, 0xf2.b, 0xd4.b, 0xee.b, 0xee.b, 0xfe.b, 0xfe.b,
            0xfb.b, 0xee.b, 0xee.b, 0xea.b, 0xf5.b, 0xee.b, 0xf7.b, 0xee.b, 0xfb.b, 0xea.b, 0xff.b, 0xda.b,
            0xee.b, 0xee.b, 0xfe.b, 0xe0.b, 0xfb.b, 0xee.b, 0xf6.b, 0xea.b, 0xfb.b, 0xe0.b, 0xfb.b, 0xee.b,
            0xfb.b, 0xee.b, 0xff.b, 0xd4.b, 0xe0.b, 0xe0.b, 0xfe.b, 0xef.b, 0xfb.b, 0xee.b, 0xfa.b, 0xea.b,
            0xf5.b, 0xef.b, 0xfd.b, 0xee.b, 0xfb.b, 0xee.b, 0xff.b, 0xd6.b, 0xfe.b, 0xef.b, 0xfe.b, 0xe0.b,
            0xe3.b, 0xe0.b, 0xfc.b, 0xe0.b, 0xee.b, 0xe0.b, 0xe0.b, 0xe0.b, 0xfb.b, 0xe0.b, 0xff.b, 0xc0.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b, 0xff.b,
            0xff.b, 0xff.b, 0xff.b, 0xff.b
        )
        // @formatter:on
    }

    private val fontBitmap by lazy {
        val bitmap = Bitmap.createBitmap(WIDTH, HEIGHT, Bitmap.Config.ARGB_8888)
        val pixels32 = ByteBuffer.allocate(WIDTH * HEIGHT * 4)
        val intBuffer = pixels32.asIntBuffer()
        FONT_DATA.forEachIndexed { i, byte ->
            (0 until 8).forEach { j ->
                intBuffer.put(i * 8 + j, if ((byte and (0x01 shl j).b) == 0.b) MAX_VALUE else 0)
            }
        }
        bitmap.copyPixelsFromBuffer(pixels32)
        bitmap
    }

    private val fontCache = mutableMapOf<Int, Bitmap>()

    fun getChar(c: Int): Bitmap {
        return fontCache.computeIfAbsent(c) {
            val row = c / CHARS_BY_ROW
            val col = c % CHARS_BY_ROW
            val x = col * CHAR_WIDTH
            val y = row * CHAR_WIDTH
            Bitmap.createBitmap(fontBitmap, x, y, CHAR_WIDTH, CHAR_HEIGHT)
        }
    }
}